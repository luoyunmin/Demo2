（一）Android打开蓝牙
1.获取BluetoothAdapter，然后调用enable()方法
BluetoothAdapter获取的方法有两种，
第一种，通过BluetoothManager获取,这种方法支持API18以上，也就是Android 4.3
BluetoothAdapter mBluetoothAdapter = null;
BluetoothManager mBluetoothManager = (BluetoothManager)context.getService(Context.BLUETOOTH_SERVICE);
if(mBluetoothManager != null){
	mBluetoothAdapter = mBluetoothManager.getAdapter();
}
第二种，通过BluetoothAdapter获取,如果设备支持蓝牙，就会返回BluetoothAdapter，不支持就会返回null。
BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
BluetoothAdapter打开前先需要判断设备是否支持蓝牙，然后才能打开
//打开蓝牙
if(mBluetoothAdapter != null)
	mBluetoothAdapter.enable();
2.通过系统API来打开蓝牙，这种方式会弹出Dialog来提示用户。返回0表示用户拒绝，-1表示用户允许或已经打开。
private static final int REQUEST_OPEN_BLUETOOTH_CODE = 0x001;
Intent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
startActivityForResult(intent,REQUEST_OPEN_BLUETOOTH_CODE);
这种方式可以修改蓝牙设备的可见时间，到了时间后，他的可见性就会自动关闭。
Intent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
intent.putExtra(BluetoothAdapter.EXTRA_DISCOVERY_DURATION,300);
startActivity(Intent)

发现BluetoothAdapter直接打开蓝牙的话，没办法设置蓝牙的可见时间
网上查了一下，发现是隐藏的API。如果用这种方法，怎么设置蓝牙的可见性？
第一种，使用上面2方式设置可见时间，但是这种方式没什么用，还不如直接使用上面的的2方式打开。
第二种，通过隐藏API来设置可见时间，
打印方法BluetoothAdapter里面的所有方法，发现setDiscoverableTimeout可能就是我们需要的方法。
首先看下源码，然后发现原来源码里面的隐藏API就算是public的也不能直接调用...
看见setDiscoverableTimeout方法接收一个int类型的参数，没有返回参数，
并且如果BluetoothAdapter的状态不是STATE_ON就会直接return。
然后直接通过反射调用setDiscoverableTimeout试一试。发现调用成功了，但是并没有开放检测。
看一下STATE_ON所代表的一系列状态有什么作用
STATE_OFF表示蓝牙已经关闭
STATE_ON表示蓝牙已经开启
STATE_TURNING_ON表示蓝牙正在打开过程中
STATE_TURNING_OFF表示蓝牙正在关闭的过程中

根据上面的状态，那么我们当时的状态肯定不是STATE_ON，注册个广播来监听一下看看状态的变化，
并且打印一下调用之前和调用之后的状态。
发现调用之前和之后的状态都是STATE_OFF，然后才是STATE_TRUNING_ON，再是STATE_ON
那我们更换策略，在广播里面设置可见时间。然后测试后发现还是不行。几个意思啊，日狗哟
在思考下，还有什么原因会导致设置不成功？想一下，既然是隐藏API，那是不是没有调用到？
我们通过Method的setAccessible试试看，看下能不能设置成功，然而还是没用，日了狗，什么鬼情况。
在思考一下上面2方法设置的方式，发现他有两个参数设置，一是ACTION_REQUEST_DISCOVERABLE
二是EXTRA_DISCOVERY_DURATION，翻了下源码，发现这个ACTION_REQUEST_DISCOVERABLE是setScanMode用到了，
结果我们发现setScanMode也是隐藏API，用我们的老套路反射调用这个方法。
那我们先通过setScanMode设置这个状态。并且这个setScanMode可以直接设置duration，然后我们直接试试这个方法
然后直接崩溃了，是不是我们设置的状态有问题，然后我们了解下这些状态
SCAN_MODE_NONE表示这个蓝牙设备不能扫描以及被扫描
SCAN_MODE_CONNECTABLE表明这个蓝牙设备可以扫描其它设备
SCAN_MODE_CONNECTABLE_DISCOVERABLE表示这个蓝牙设别可以扫描其它设备，也可以被其他设备扫描
我们注册一个广播来监听scanMode的状态变化，然后分析状态的变化。
首先，我们分析通过Intent的方式打开并设置可见时间的方式时，scanMode的状态变化。
我们发现，在通过Intent方式打开蓝牙的状态变化是，并且多次使用这方式打开，都没有变化
STATE_TURNING_ON--->SCAN_MODE_NONE-->SCAN_MODE_CONNECTABLE-->STATE_ON-->SCAN_MODE_CONNECTABLE_DISCOVERABLE
再比对通过BluetoothAdapter的enable方法打开方式的变化
STATE_TURNING_ON-->SCAN_MODE_NONE-->SCAN_MODE_CONNECTABLE-->STATE_ON
通过两种状态的变化，发现仅仅只是变化少了一个SCAN_MODE_CONNECTABLE_DISCOVERABLE
现在，我们来理一下思绪，蓝牙一旦打开，就是可以扫描其它设备的，那么他在打开的情况下，默认是SCAN_MODE_CONNECTABLE
那么我们需要可见性的状态就是scanMode为SCAN_MODE_CONNECTABLE_DISCOVERABLE。

再翻一遍源码，发现既然系统最终会调用setScanMode(int mode,int duration)这个方法设置可见时间，那我们看一下在这之前做了什么，
翻了源码发现，setScanMode(int mode)调用了上面的那个setScanMode，并且，他先是获取了时间，然后再设置的，那我们是否也可以
按照这个流程走，先设置可见时间，然后再直接调用setScanMode(int mode)这个方法。测试发现是可以的。
那我们是不是可以直接使用setScanMode(int mode,int duration)这个方法呢？测试发现也是可以的。


（二）注册广播监听蓝牙设备扫描信息
//蓝牙广播的
//Set<BluetoothDevice> searchBluetoothDevice=new HashSet<>();
 String action = intent.getAction();
            //找到设备
            if (BluetoothDevice.ACTION_FOUND.equals(action)) {
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                e("lym", "find device: name: " + device.getName() + "address:" + device.getAddress());
                searchDevice.add(device);
            }
            //搜索完成
            else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
                e("lym", "搜索完成");
            }
            //蓝牙扫描开始
            else if (BluetoothAdapter.ACTION_DISCOVERY_STARTED.equals(action)) {
                e("lym", "蓝牙扫描开始");
            }
            //蓝牙设备绑定过程
            else if (BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(action)) {
                int blueBondState = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, 0);
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                switch (blueBondState) {
                    case BluetoothDevice.BOND_NONE:
                        Toast.makeText(context, "设备: " + device.getName() + " 取消绑定", Toast.LENGTH_SHORT).show();
                        break;
                    case BluetoothDevice.BOND_BONDING:
                        Toast.makeText(context, "设备: " + device.getName() + " 正在绑定中...", Toast.LENGTH_SHORT).show();
                        break;
                    case BluetoothDevice.BOND_BONDED:
                        Toast.makeText(context, "设备: " + device.getName() + " 已成功绑定", Toast.LENGTH_SHORT).show();
                        break;
                }
            }
            //蓝牙开启到关闭再到开启的一系列状态变化
            else if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) {
                int blueState = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, 0);
                switch (blueState) {
                    case BluetoothAdapter.STATE_OFF:
                        Log.e("lym", "STATE_OFF");
                        break;
                    case BluetoothAdapter.STATE_TURNING_ON:
                        Log.e("lym", "STATE_TURNING_ON");
                        break;
                    case BluetoothAdapter.STATE_ON:
                        Log.e("lym", "STATE_ON");
                        try {
                            Method setScanMode = bluetoothAdapter.getClass().getMethod("setScanMode", int.class, int.class);
                            setScanMode.invoke(bluetoothAdapter, BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE, 60);
                            //Method setDiscoverableTimeout = bluetoothAdapter.getClass().getMethod("setDiscoverableTimeout", int.class);
//                            Method setScanMode = bluetoothAdapter.getClass().getMethod("setScanMode", int.class);
                            //setDiscoverableTimeout.invoke(bluetoothAdapter,BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE, 60);
//                            setScanMode.invoke(bluetoothAdapter, BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE);
                        } catch (NoSuchMethodException e) {
                            e.printStackTrace();
                        } catch (InvocationTargetException e) {
                            e.printStackTrace();
                        } catch (IllegalAccessException e) {
                            e.printStackTrace();
                        }
                        break;
                    case BluetoothAdapter.STATE_TURNING_OFF:
                        Log.e("lym", "STATE_TURNING_OFF");
                        break;
                }
            }
            //监听BluetoothAdapter的scanMode变化
            else if (BluetoothAdapter.ACTION_SCAN_MODE_CHANGED.equals(action)) {
                int scanMode = intent.getIntExtra(BluetoothAdapter.EXTRA_SCAN_MODE, 0);
                switch (scanMode) {
                    case BluetoothAdapter.SCAN_MODE_NONE:
                        Log.e("lym", "SCAN_MODE_NONE");
                        break;
                    case BluetoothAdapter.SCAN_MODE_CONNECTABLE:
                        Log.e("lym", "SCAN_MODE_CONNECTABLE");
                        break;
                    case BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE:
                        Log.e("lym", "SCAN_MODE_CONNECTABLE_DISCOVERABLE");
                        break;
                }
            }

IntentFilter filter = new IntentFilter();
//扫描到一个蓝牙设备时
filter.addAction(BluetoothDevice.ACTION_FOUND);
//蓝牙扫描结束时
filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
//蓝牙扫描开始
filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
//蓝牙绑定状态的一系列变化
filter.addAction(BluetoothAdapter.ACTION_BOND_STATE_CHANGED);
//蓝牙状态的一系列变化
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
//蓝牙扫描状态的一些列变化
filter.addAction(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED)
registerReceiver(bluetoothReceiver);


//还有一些可以监听的，后面再介绍。
BluetoothDevice 表示一个蓝牙设备的信息，可以通过它获取以下常见信息
getAddress()获取蓝牙设备的MAC地址
getName()获取蓝牙设备的名字
getBondState()获取蓝牙设备的绑定状态
getUuids()获取蓝牙设备的
注意，如果已经配对的手机不会出现在广播中出现。



（三）获取已经配对的蓝牙设备信息
1.获取已经配对的蓝牙设备信息在
Set<BluetoothDevice> bonded = bluetoothAdapter.getBondedDevice();
如果没有已经配对的设备，bonded不会返回空，但是返回的Set长度为0
已配对的蓝牙设备会用Set集合保存

（四）配对
配对需要手机开放检测，才能进行配对。
1.设备配对
	BluetoothAdapter.createBond();

2.取消配对
Set<BluetoothDevice> bondedDevice = bluetoothAdapter.getBondedDevice();
//随便对一个已经配对的手机进行取消配对
if(bondedDevice.size() > 0){
	//发现API中并没有提供取消配对的功能
	//查了网上，都是通过反射来取消配对的
	//通过device.getClass.getDeclaredMethods()发现有一个removeBond方法
	//然后打印这个方法返回参数和传入参数
	//Method[] methodArray = device.getClass().getDeclaredMethods();
    //for (Method m : methodArray) {
    //Log.e("lym", "method name: " + m.getName());
    //String methodName = m.getName();
    //if ("removeBond".equals(methodName)) {
    //Log.e("lym", "method name: " + methodName);
    //Log.e("lym", "method return type: " + m.getGenericReturnType());
    //Type[] types = m.getGenericParameterTypes();
    //for (Type t : types) {
    //Log.e("lym", t.getClass().getName());
    //}
	//}
    //}
	//通过以上的打印发现，BluetoothDevice里面有一个removeBond方法，这个方法不需要传入任何参数，返回boolean
	//getMethod的两个参数分别是方法名和调用该方法的参数
	//invoke的两个参数分别是执行这个方法的对象和执行这个方法的具体参数
	BluetoothDevice device= bondedDevice.iterator().next();
	Method m = device.getClass.getMethod("removeBond",(Class)null);
	m.invoke(device,(Object)null)
}

(五)基于RFCOMM的BluetoothSocket(客户端)和BluetoothServerSocket(服务端)
上面介绍了一系列的简单使用，现在基于前面的做进一步的研究，蓝牙不是给我们用打开关闭的，传输数据才是主要的。
为了能够建立连接，我们先定一个需求，通过一个EditText，然后通过蓝牙发送消息，
另外一台手机，收到消息并显示，反之亦可以。
所以一台手机既可以做服务端，并且又可以做客户端，
思路：首先一台手机建立客户端，一台手机建立服务端，然后进行Socket连接。
蓝牙通信是建立在SDP协议上的，类似于Socket，分为BluetoothServerSocket和BluetoothSocket
1.创建服务端与客户端
首先BluetoothAdapter的listenUsingRfWithServerRecord()获取服务端Socket
通过上面，发现并没有发生任何的异常，而且，BluetoothServerSocket已经获取到了，
那么当我们运行这个的时候会发现，客户端如果没有连接就一直循环直到连接进来，这样如果没有客户端的情况下
就会不停的循环，直到页面无响应，那么，是否是需要一个客户端来同时发起配对才可以能，做一个测试。
测试发现，如果只有服务端，什么都不会发生，并且在线程中对服务端做初始化，并不会阻塞进程。

上面分析，如果只有服务端，并没有什么用处，那我们再建一个客户端，并且也跟服务端一样，
在进程中做初始化。
首先创建BluetoothSocket，通过BluetoothAdapter的createRfcommSocketToServiceRecord()方法创建。
并且我们发现BluetoothSocket有一个connect()方法，也就是说，只有客户端才能发起连接。然后查看一下具体的情况。
通过这步，我们发现实际上，我们创建的对于连接状态的广播监听并没有什么调用的地方。
那我们测试一下是否真的已经连接成功，通过消息的打印来测试，我们知道服务端的BluetoothServerSocket的accept()方法
能获取到客户端的BluetoothSocket，那我们在之后打印一下是否会继续调用。那我们在BluetoothServerSocket获取后
直接开启线程。测试是否有客户端连接进来。并且打印消息。但是并不对客户端进行任何处理。客户端创建出现了IOException
我们发现创建BluetoothSocket之前一直在搜索，那是否是搜索问题产生的呢，我们关闭搜索后试试。
发现并没有报IOException了，但是是否连接上，还不清楚，那我们切换回服务端，看一下是否有什么提示。
通过在创建服务端的accept()之后打印随便一些内容，发现已经建立起了连接。至此，我们客户端与服务端已经正式建立起了连接

2.发送数据
首先做一些简单的，往服务端发送一个"您好"，然后服务端回复一个"您也好"。
同时发现如果用其它Writer和Reader对流进行包装就会出现读取不到的情况。


3.发送即时数据。
采用Handler来发送消息到主线程，并且不断读取客户端或者服务端发送过来的数据，
而且最终发现BluetoothAdapter.ACTION_STATE_CONNECTION_CHANGE并不是来监听蓝牙之间是否连接的。

建立连接需要一个UUID，并且这个UUID在BluetoothServerSocket和BluetoothSocket相同才能建立连接，
我先随便生成一个UUID，然后贴过来。