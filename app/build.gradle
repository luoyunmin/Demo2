apply plugin: 'com.android.application'

android {

    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.yunmin.demo2"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "default_channel"]
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {}
        release {
            storeFile
            storePassword
            keyAlias
            keyPassword

        }
    }
    productFlavors {
        default_channel {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: default_channel]
        }
        wandoujia {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: wandoujia]
        }
        baidu {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: baidu]
        }
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: xiaomi]
        }
        huawei {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: huawei]
        }
    }
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    applicationVariants.all {
        variant ->
            variant.outputs.each {
                output ->
                    def oldFile = output.outputFile
                    if (variant.buildType.name.equals("release")) {
                        def releaseApkName = getProject().name + "_v${defaultConfig.versionName}_${new Date().format("yyyy-mm-dd", TimeZone.getTimeZone("UTC"))}_" + variant.productFlavors[0].name + "_release.apk"
                        println(releaseApkName)
                        output.outputFile = new File(oldFile.parent, releaseApkName)
                    }
            }
    }
    getSigningProperties()

}
//读取签名配置文件
def getSigningProperties() {
    def propFile = file('../buildSystem/signing.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])

            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']

            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']

            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
}
